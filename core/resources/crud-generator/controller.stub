<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;
use Session;
use DB;

class DummyClass extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        return view('{{viewPath}}{{viewName}}.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        return view('{{viewPath}}{{viewName}}.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        {{modelName}}::create($requestData);

        Session::flash('flash_message', '{{modelName}} added!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  int  $id
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update($id, Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        ${{crudNameSingular}}->update($requestData);

        Session::flash('flash_message', '{{modelName}} updated!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        {{modelName}}::destroy($id);

        Session::flash('flash_message', '{{modelName}} deleted!');

        return redirect('{{routeGroup}}{{viewName}}');
    }
	
	/**
	 * any data
	 */
	public function anyData(Request $request)
    {
        DB::statement(DB::raw('set @rownum=0'));
        ${{viewName}} = {{modelName}}::select([
            DB::raw('@rownum  := @rownum  + 1 AS rownum'), '*']);

         $datatables = app('datatables')->of(${{viewName}})
            ->addColumn('action', function (${{viewName}}) {
                return '<a href="{{viewName}}/'.${{viewName}}->id.'/edit" class="btn btn-xs btn-primary rounded" data-toggle="tooltip" title="" data-original-title="'. trans('systems.edit') .'"><i class="fa fa-pencil"></i></a> <a onclick="deleteData('.$user->id.')" class="btn btn-xs btn-danger rounded" data-toggle="tooltip" title="" data-original-title="'. trans('systems.delete') .'"><i class="fa fa-trash"></i></a>';
            });

        if ($keyword = $request->get('search')['value']) {
            $datatables->filterColumn('rownum', 'whereRaw', '@rownum  + 1 like ?', ["%{$keyword}%"]);
        }

        if ($range = $datatables->request->get('range')) {
            $rang = explode(":", $range);
            if($rang[0] != "Invalid date" && $rang[1] != "Invalid date" && $rang[0] != $rang[1]){
                $datatables->whereBetween('{{modelName}}.created_at', ["$rang[0] 00:00:00", "$rang[1] 23:59:59"]);
            }else if($rang[0] != "Invalid date" && $rang[1] != "Invalid date" && $rang[0] == $rang[1]) {
                $datatables->whereBetween('{{modelName}}.created_at', ["$rang[0] 00:00:00", "$rang[1] 23:59:59"]);
            }
        }
		
        return $datatables->make(true);
    }
}
